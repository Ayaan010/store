rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to check if only quantity and inStock fields are being updated
    function isQuantityUpdate(product) {
      let diff = request.resource.data.diff(resource.data);
      return diff.changedKeys().hasOnly(['quantity', 'inStock']);
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Products collection
    match /products/{productId} {
      // Anyone can read products
      allow read: if true;
      // Admins can do anything with products
      allow create, delete: if isAdmin();
      // Allow updates if user is admin OR if they're only updating quantity (for cart operations)
      allow update: if isAdmin() || (isAuthenticated() && isQuantityUpdate(resource));
    }

    // Cart collection
    match /carts/{cartId} {
      // Users can read their own cart items
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      // Users can create cart items for themselves
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      // Users can update or delete their own cart items
      allow update, delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }

    // Categories collection (if you have one)
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if isAdmin();
    }
  }
} 